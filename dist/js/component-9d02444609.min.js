/*
  ref : https://getbootstrap.com/docs/4.3/components/alerts/
  ex: $this.alert('close');
*/
var alertComponent = { 
  template: `
  <div class="alert" v-bind:class="colorObj[colorTarget]" role="alert" style="display:none" ref="alert" @click="closeEvent">
    <a class="alert-link">{{code}}</a> {{msg}} 
  </div>
  `,
  data: function(){
    return {
      $alert: null,
      msg: '',
      code: '',
      colorObj: {
        red: 'alert-danger',
        blue: 'alert-primary',
        green: 'alert-success',
        yellow: 'alert-warning'
      },
      colorTarget: 'red',
      timeout: null,
      option: null,
    };
  },
  methods: {
    showAlert: function(msg,code,color,option){
      clearInterval(this.timeout);
      this.msg = msg;
      if(color){
        this.colorTarget = color;
      }
      if(option){
        this.option = option;
      }
      console.log('showAlert called ',msg,code);
      $alert.fadeIn();
      this.timeout = setTimeout($.proxy(function(){
        $alert.fadeOut();
      },this),3000);
    },
    closeEvent: function(){
      clearInterval(this.timeout);
      $alert.fadeOut();
      console.log(this.option)
      console.log(this.colorTarget);
      if(this.colorTarget=='blue'){
        //this.$EventBus.$emit('moveChat',this.option);
        this.$router.push('/chat/'+this.option);
        this.option = null;
      }
    }
  },
  created: function () {
    this.$EventBus.$on('showAlert',this.showAlert);
  },
  mounted: function () {
    $alert  = $(this.$el);
    //this.showAlert('test','test','yellow');
  },
};

/* <div class="alert alert-primary" role="alert">
  A simple primary alert—check it out!
</div>
<div class="alert alert-secondary" role="alert">
  A simple secondary alert—check it out!
</div>
<div class="alert alert-success" role="alert">
  A simple success alert—check it out!
</div>
<div class="alert alert-danger" role="alert">
  A simple danger alert—check it out!
</div>
<div class="alert alert-warning" role="alert">
  A simple warning alert—check it out!
</div>
<div class="alert alert-info" role="alert">
  A simple info alert—check it out!
</div>
<div class="alert alert-light" role="alert">
  A simple light alert—check it out!
</div>
<div class="alert alert-dark" role="alert">
  A simple dark alert—check it out!
</div> */
var Chat = {
  template: `
    <div class="container">
    <h3 class=" text-center">{{roomId}}</h3>
    <div class="messaging">
          <div class="inbox_msg">
            <div class="inbox_people">
              <div class="headind_srch">
                <div class="recent_heading">
                  <h4>Recent</h4>
                </div>
                <div class="srch_bar">
                  <div class="stylish-input-group">
                    <input type="text" class="search-bar"  placeholder="Search" >
                    <span class="input-group-addon">
                    <button type="button"> <i class="fa fa-search" aria-hidden="true"></i> </button>
                    </span> </div>
                </div>
              </div>
              <div class="inbox_chat">
              <router-link :to="{ name: 'chat', params: {roomId: room.id} }" v-for="room in roomlist">
                <div class="chat_list" v-bind:class="{ active_chat: room.id==roomId }" >
                  <div class="chat_people">
                    <div class="chat_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                    <div class="chat_ib">
                      <h5>{{room.chats[0]?room.chats[0].chat:'대화가 없습니다.'}} 
                        <span class="chat_date">{{room.chats[0]?room.chats[0].createdAt:''}}</span>
                      </h5>
                      <p>{{room.users[0].email}}</p>
                    </div>
                  </div>
                </div>
              </router-link>
              </div>
            </div>
            <div class="mesgs">
              <div class="msg_history">
                <div class="incoming_msg">
                  <div v-for="chat in chatList">

                  <div v-if="chat.userId !== userinfo.id" class="incoming_msg_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                    <div v-if="chat.userId !== userinfo.id" class="received_msg">
                      <div class="received_withd_msg">
                        <p>
                          {{chat.chat}}
                        </p>
                        <span class="time_date"> {{chat.createdAt}} </span></div>
                    </div>
                  
                    <div v-if="chat.userId === userinfo.id" class="outgoing_msg">
                    <div class="sent_msg">
                      <p>
                        {{chat.chat}}
                      </p>
                      <span class="time_date"> {{chat.createdAt}} </span> </div>
                  </div>
                  </div>

                  
                  </div>
                </div>
                <div class="type_msg">
                  <div class="input_msg_write">
                    <input v-model="chat" v-bind:disabled="roomId==='none'" type="text"  v-on:keyup.enter="sendChat" class="write_msg" v-bind:placeholder="chatPlaceHolder" />
                    <button class="msg_send_btn" type="button" v-on:click="sendChat" ><i class="fa fa-paper-plane-o" aria-hidden="true"></i></button>
                  </div>
                </div>
              </div>
            </div>  
          <p class="text-center top_spac"> Design by <a target="_blank" href="#">Sunil Rajput</a></p>
        </div>
      </div>`,
  props: ['roomId','roomlist','userinfo'],
  data: function(){
    return {
      socket: null,
      chatList: [],
      chat: '',
    }
  },
  methods: {
    init: function(vm){
      console.log('chat component init');
      this.getChat();
    },
    getChat: function(){
      if(this.roomId==='none'){
        this.chatList = [];
        return;
      }
      console.log('getChat called res: ');
      this.$http({
        url: '/v1/chat-contents',
        headers: this.getHeader(),
        method: 'get',
        params: {roomId: this.roomId}
      }).then($.proxy(function(res){
        console.log(res.data);
        this.chatList = res.data.data;
      },this));
    },
    getNewChat: function(chatObj){
      console.log('getNewChat called');
      console.log(chatObj)
      if(chatObj.roomId==this.roomId){
        this.chatList.push(chatObj);
      }
      for(var i=0;i<this.roomlist.length;i++){
        if(this.roomlist[i].id==chatObj.roomId){
          if(this.roomlist[i].chats.length<=0){
            this.roomlist[i].chats.push(chatObj);
          }else{
            //this.roomlist[i].chats[0] = chatObj;  동적 변환 안됨
            this.roomlist[i].chats.splice(0, 1, chatObj);
          }
          break;
        }
      }
    },
    sendChat: function(){
      console.log('sendChat called');
      if(this.chat.length<=0){
        return;
      }
      this.$http({
        url: '/v1/chat',
        headers: this.getHeader(),
        method: 'post',
        data: {chat: this.chat,roomId: this.roomId}
      }).then($.proxy(function(res){
        console.log(res);
        console.log(this.chatList);
        this.chat = '';
      },this)).catch($.proxy(function(err){
        console.log(err);
      },this));
    }
  },
  computed: {
    chatPlaceHolder : function(){
      return this.roomId==='none'?'채팅방을 선택 해 주세요':'메세지를 입력 해 주세요';
    }
  },
  watch : {
    roomId : function(data){
      console.log('room changed!! roomId : ',data);
      this.getChat();
    }
  },
  mixins: [mixins],
  created: function(){
    //getNewChat
    this.$EventBus.$on('newchat',this.getNewChat);
  },
  mounted: function(){
    
  },
  beforeRouteEnter (to, from, next) {
    next(function(vm){
      vm.init();
    });
  },
  beforeRouteLeave (to, from, next) {
    next();
  }   
};
var FriendsList = {
  template : `
  <div class="v-home">
    <div class="jumbotron jumbotron-fluid">
      <div class="container">
        <h1 class="display-4">Fluid jumbotron</h1>
        <p class="lead">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>
      </div>
    </div>

    <div class="input-group">
      <input type="text" class="form-control" v-model="findValue" aria-label="Text input with segmented dropdown button" v-bind:placeholder="changeFilterName.holder">
      <div class="input-group-append">
        <button @click="doFind" type="button" class="btn btn-outline-secondary">{{changeFilterName.btn}}</button>
        <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          <span class="sr-only">Toggle Dropdown</span>
        </button>
        <div class="dropdown-menu">
          <button class="dropdown-item" @click="filterValue='email'">친구찾기</button>
          <!--<button class="dropdown-item" @click="filterValue='list'">친구목록검색</button>-->
          <!--<div role="separator" class="dropdown-divider"></div>
          <a class="dropdown-item" href="#">Separated link</a>-->
        </div>
      </div>
    </div>
    
    <div class="v-friend-list">
      <ul class="list-group">
        <li class="list-group-item" v-for="item in showList">
          <img src="./common/img/coffie.jpg" class="rounded v-profile" alt="...">
          {{item.email}}
          <!-- 친구 목록 -->
          <button type="button" class="btn btn-primary" @click="moveChat(item.id)">Chat</button>
          <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#exampleModal">Delete</button>
        </li>
      </ul>
    </div>

    <div class="v-friend-list" v-show="findList.length>0">
      <ul class="list-group">
        <li class="list-group-item" v-for="item in findList">
          <img src="./common/img/coffie.jpg" class="rounded v-profile" alt="...">
          {{item.email}}
          <!-- 친구 찾기 -->
          <button v-if="resultType==='email'" type="button" class="btn btn-primary" @click="addFollowList(item.id)">Follow</button>
        </li>
      </ul>
    </div>
  </div>
  `,
  data: function(){
    return {
      filterValue: 'email', //email or list
      findValue: '',
      showList : [],
      findList: [],
      resultType: 'list', //email or list
    }
  },
  methods: {
    doFind: function(){
      if(this.filterValue==='email'){
        this.findEmail(this.findValue);
      }else{
        console.log('TODO: filter 제작 후 리스트 내 목록 검색');
      }
    },
    getFollowList: function(){
      this.$http({
        url: '/v1/follow',
        headers: this.getHeader(),
        method: 'get',
      }).
      then($.proxy(function(res){
        console.log(res.data);
        this.showList = res.data.data;
        console.log(this.showList);
      },this))
      .catch($.proxy(function(err){
        console.log(err.response);
        this.$EventBus.$emit('showAlert',err.response.data.data,err.response.data.code);
      },this));
    },
    findEmail: function(){
      if(!this.findValue){
        this.$EventBus.$emit('showAlert','검색어를 입력해 주세요.');
        return;
      }
      this.$http({
        url: '/v1/find-user',
        headers: this.getHeader(),
        method: 'get',
        params: {email: this.findValue}
      }).then($.proxy(function(res){
        console.log(res);
        if(!res.data.data.list||res.data.data.list.length<=0){
          this.$EventBus.$emit('showAlert','결과가 없습니다.',err.response.data.code);
          return;
        }
        this.resultType = this.filterValue;
        this.findList = res.data.data.list;
      },this)).catch($.proxy(function(err){
        console.log(err.response);
        this.$EventBus.$emit('showAlert',err.response.data.data,err.response.data.code);
      },this))
    },
    addFollowList: function(id){
      for(var i=0;i<this.showList.length;i++){
        if(this.showList[i].id == id){
          this.$EventBus.$emit('showAlert','목록에 존재 합니다.');
          return;
        }
      }
      this.$http({
        url: '/v1/add-follow',
        headers: this.getHeader(),
        method: 'post',
        data: {addId: id}
      }).then($.proxy(function(res){
        console.log(res.data);
        this.showList.push(res.data.data);
      },this)).catch($.proxy(function(err){
        console.log(err.response);
        this.$EventBus.$emit('showAlert',err.response.data.data,err.response.data.code);
      },this))
    },
    deleteFollowList: function(){
      console.log('deleteFollowList called');
    },
    moveChat: function(targetId){
      console.log('moveChat targetId: ',targetId);
      /*
      방 체크 및 생성 api 제작
      리턴 받은 후 화면 전환
      */
     this.$http({
        url: '/v1/check-room',
        headers: this.getHeader(),
        method: 'post',
        data: {targetId: targetId}
      }).then($.proxy(function(res){
        approuter.push('/chat/'+res.data.data);
      },this)).catch($.proxy(function(err){
        console.log(err);
        this.$EventBus.$emit('showAlert',err.response.data.data,err.response.data.code);
      },this));
    }
  },
  computed: {
    changeFilterName: function(){
      return {
        btn: this.filterValue==='email'?'친구찾기':'친구목록검색',
        holder: this.filterValue==='email'?'email을 입력 해 주세요':'Follower List의 email을 입력 해 주세요',
      }
    }
  },
  mixins: [mixins],
  created: function(){
    
  },
  beforeRouteEnter (to, from, next) {
    next(function(vm){
      vm.getFollowList();
    });
  },
  beforeRouteLeave (to, from, next) {
    next();
  }
};
var headerComponent = {
  template: `
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <router-link to="/" class="navbar-brand">Home</router-link>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarText">
    <ul class="navbar-nav mr-auto">
      <li class="nav-item">
        <router-link to="/timeLine" class="nav-link">Time Line</router-link>
      </li>
      <li class="nav-item">
        <router-link to="/friends" class="nav-link">Friends List</router-link>
      </li>
      <li class="nav-item">
        <router-link to="/chat/none" class="nav-link">chat test</router-link>
      </li>
    </ul>
  </div>
</nav>
  `,
  mixins: [mixins],
};
var Home = { 
  template: `
    <main role="main" class="container">
      <div class="starter-template v-home">
        <div class="card">
          <img src="./common/img/main.jpg" class="card-img-top v-main-img" alt="...">
          <div class="card-body">
            <h5 class="card-title">V - SNS.{{loginstate}}</h5>
            <div class="v-btn-container" v-if="!loginstate">
              <!--<button type="button" class="btn btn-primary" data-toggle="modal" data-target=".bd-example-modal-sm">로그인</button> method 연결 없이 출력 가능-->
              <button type="button" class="btn btn-primary" @click="$EventBus.$emit('showLogin')">로그인</button>
              <router-link to="/join" class="btn btn-primary" exact>회원가입</router-link>
            </div>
          </div>
        </div>
      </div>
    </main>
  `,
  data: function(){
    return {
      email: '',
      password: '',
    }
  },
  methods: {
    showLogin: function(){
      console.log('showLogin');
      this.$EventBus.$emit('showLogin');
      console.log(this.$EventBus);
    },
  },
  props: ['loginstate'],
  mounted: function(){
    console.log(this);
  },
  mixins: [mixins],
  beforeRouteEnter (to, from, next) {
    next();
  },
  beforeRouteLeave (to, from, next) {
    next();
  }   
};

var Join = { 
  template: `
  <div>
    <form id="join_form" @submit.prevent="doJoin">
      <div class="form-group">
        <label for="join_email">Email 주소</label>
        <input v-model="email" name="email" type="email" class="form-control" id="join_email" aria-describedby="emailHelp" placeholder="Enter email" required>
        <small id="emailHelp" class="form-text text-muted"></small>
      </div>
      <div class="form-group">
        <label for="join_phone">전화번호</label>
        <input v-model="phone" name="phone" type="tel" class="form-control" id="join_phone" placeholder="Password" required>
      </div>
      <div class="form-group">
        <label for="password">암호</label>
        <input v-model="password" name="password" type="password" class="form-control" id="password" placeholder="Password" required>
      </div>
      <div class="form-group">
        <label for="check_password">암호 확인</label>
        <input v-model="chkPassword" name="checkPassword" type="password" class="form-control" id="check_password" placeholder="check Password" requied>
      </div>
      <button type="submit" class="btn btn-primary">회원가입</button>
      </br></br>
      <div class="alert alert-danger" role="alert" v-bind:class="{ hide: isHide }">
        {{errMsg}}
      </div>
    </form>
  </div>
  `,
  data: function(){
    return {
      email: '',
      password: '',
      chkPassword: '',
      phone: '',
      errMsg: '',
      isHide: true,
    }
  },
  mixins: [mixins],
  methods: {
    doJoin: function(e){
      //var request = function(method, url, param, header,success, fail, option){
      if(this.password!==this.chkPassword){
        this.$EventBus.$emit('showAlert','비밀번호를 확인 해 주세요');
        return
      }
      this.$http({
        url: '/v1/join',
        headers: this.getHeader(),
        method: 'post',
        data: { email: this.email, password: this.password, phone: this.phone },
      }).then($.proxy(function(res){
        console.log('join success');
        console.log(res);
      },this)).catch($.proxy(function(err){
        console.log('join fail');
        console.log(err);
        this.$EventBus.$emit('showAlert',err.response.data,err.response.code);
      },this));
    }
  },
};
/*
  ref : https://getbootstrap.com/docs/4.3/components/modal/
  ex: $this.modal('show')
*/
var loginComponent = { 
  props: ['loginstate'],
  template: `
  <div class="modal fade bd-example-modal-sm" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-sm">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title h4" id="mySmallModalLabel">Small modal</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="login_close_btn">
          <span aria-hidden="true">×</span>
        </button>
        </div>
          <div class="modal-body">
          <form v-on:submit.prevent="doLogin">
            <div class="form-group">
              <label for="exampleInputEmail1">Email address</label>
              <input v-model="email" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
              <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
            </div>
            <div class="form-group">
              <label for="exampleInputPassword1">Password</label>
              <input v-model="password" type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
            </div>
            <button id="submit_btn" type="submit" class="btn btn-primary" data-container="body" data-toggle="popover" data-placement="bottom" data-content="test">Submit</button>
          </form>
        </div>
    </div>
  </div>
</div>
  `,
  mixins: [mixins],
  data: function(){
    return {
      $login: null,
      email: '',
      password: '',
    };
  },
  methods: {
    showLogin: function(){
      $login.modal('show');
    },
    doLogin: function(){
      console.log(this.email);
      console.log(this.password);
      var axiocConfig = {
        url: '/v1/login',
        headers: this.getHeader(),
        method: 'post',
        data: {email: this.email, password: this.password }
      }; 
      this.$http(axiocConfig).
      then(this.loginCallback).
      catch($.proxy(function(err){
        console.log(err);
        this.$EventBus.$emit('showAlert',err.response.data,err.response.code);
      },this));
    },
    loginCallback:function(response){
      console.log('loginCallback response:', response);
      if(response.data.code===201){
        console.log(this.loginState);
        this.setSessionStorage('authorizationToken',response.data.token);
        this.loginState = true;
        this.$emit('setlogin',true)
        this.$emit('setuserinfo',response.data.info);
        this.$emit('getroomlist');
        console.log(this.loginState);
        this.closeLogin();
      }else{
        this.$EventBus.$emit('showAlert',err.data.data,err.data.code);
      }
    },
    closeLogin: function(){
      $login.modal('hide');
    },
  },
  created: function () {
    this.$EventBus.$on('showLogin',this.showLogin);
  },
  mounted: function () {
    $login = $(this.$el);
  },
};
/*
  ref : https://getbootstrap.com/docs/4.3/components/modal/
  ex: $this.modal('show')
*/
var modalComponent = { 
  template: `
    <div class="modal fade" id="v-modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            ...
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary">Save changes</button>
          </div>
        </div>
      </div>
    </div>
  `,
  data: function(){
    return {
      $this: null,
    };
  },
  methods: {
    
  },
  created: function () {
    
  },
  mounted: function () {
    $this = $(this.$el);
    //$this.modal('show');
  },
};
var TimeLine = { 
  template: `
    <div class="v-home">
      <form @submit.prevent="uploadSns">
        <div class="input-group">
          <div class="input-group-prepend">
            <span class="input-group-text">SNS</span>
          </div>
          <textarea v-model="message" class="form-control v-text-input" aria-label="With textarea" ></textarea>
        </div>
        <div class="input-group">
          <div class="custom-file">
            <input v-on:change="uploadFile" type="file" class="custom-file-input" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04" >
            <label class="custom-file-label" for="inputGroupFile04">{{imgFile?imgFile.name:'이미지를 선택 해 주세요'}}</label>
          </div>
          <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="submit" id="inputGroupFileAddon04">Upload</button>
          </div>
        </div>
      </form>

      <ul class="v-content-list">
        <li v-for="content in contents">
          <div class="card v-time-line-wraper" >
            <img v-if="content.image" v-bind:src="content.image" class="card-img-top" alt="...">
            <div class="card-body">
              <p class="card-text v-content">{{content.content}}</p>
              <p class="card-text v-content-info">{{content.user.email}} / {{content.createdAt}}</p>
            </div>
            <ul class="list-group list-group-flush">
              <li v-for="reply in content.replies" class="list-group-item"
              v-bind:class="{'v-reply-mine': content.userId==reply.userId, 'v-reply-others': content.userId!=reply.userId}">
                {{reply.reply}} / {{reply.user.email}} / {{reply.createdAt}}
                <span class="badge badge-primary">New</span>
                <span class="badge badge-secondary">×</span>
              </li>
            </ul>
            <div class="input-group mb-3">
              <input v-bind:id="'reply_'+content.id" type="text" class="form-control" placeholder="리플을 남겨주세요" aria-label="리플을 남겨주세요" aria-describedby="button-addon2">
              <div class="input-group-append">
                <button class="btn btn-outline-secondary" @click="sendReply(content.id)" type="button">Reply</button>
              </div>
            </div>
            <!--<div class="card-body">
              <a href="#" class="card-link">Card link</a>
              <a href="#" class="card-link">Another link</a>
            </div> -->
          </div>
        </li>
      </ul>      
    </div>
    `,
    mixins: [mixins],
    data: function(){
      return {
        message: null,
        imgFile: null,
        contents: [],
        userId: null,
        cashValue: {},
      }
    },
    methods: {
      getContents : function(){
        this.$http({
          url: '/v1/contents',
          headers: this.getHeader(),
          method: 'get'
        }).
        then($.proxy(function(res){
          this.userId = res.data.reqUser;
          this.contents = res.data.data;
        },this)).
        catch($.proxy(function(err){
          console.log(err.response);
          this.$EventBus.$emit('showAlert',err.response.data.data,err.response.data.code);
        },this));
      },
      uploadSns: function(e){ //sns 업로드
        var formData = new FormData();
        formData.append('content', this.message);
        var header = this.getHeader();
        if(this.imgFile){ //이미지 있을 경우
          header.enctype = 'multipart/form-data',
          formData.append('image', this.imgFile);
        }
        if(true){ //태그 있을 경우
          formData.append('hashTag', ['tag1','tag2','tag3']);
        }

        this.$http({
          url: '/v1/write',
          headers: header,
          method: 'post',
          data: formData
        }).
        then($.proxy(function(res){
          this.message = null; 
          this.imgFile = null;
          if(res.data.code===200){
            this.getContents();
          }
        },this)).
        catch(function(err){
          console.log(err.response);
        });
      },
      uploadFile: function(e){
        this.imgFile = $(e.currentTarget).prop("files")[0];
      },
      sendReply: function(contentId){
        var $inputObj = this.$el.querySelector('#reply_'+contentId);
        requestObj = {
          reply: $inputObj.value,
          contentId: contentId,
        }
        this.$http({
          url: '/v1/reply',
          headers: this.getHeader(),
          method: 'post',
          data: requestObj
        }).then($.proxy(function(res){
          if(res.data.code===200){
            $inputObj.value = '';
            this.getContents();
          }
        },this)).catch($.proxy(function(err){
          console.log(err.response);
          this.$EventBus.$emit('showAlert',err.response.data.data,err.response.data.code);
        },this));
      }
    },
    computed: {
      
    },
    mounted: function(){
      this.getContents();
    },
    beforeRouteEnter (to, from, next) {
      //to : 현재 컴포넌트 info Object
      //from : 이전 컴포넌트 info Object
      next();
    },
    beforeRouteLeave (to, from, next) {
      next();
    }
};